
VideoGameConsole.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00802000  00000c04  00000c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  0080220a  0080220a  00000ea2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ef6  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000967  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec3  00000000  00000000  000038bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ce7  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052b  00000000  00000000  0000576b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00005c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	02 c5       	rjmp	.+2564   	; 0xa3e <__vector_14>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	84 c4       	rjmp	.+2312   	; 0x94a <__vector_16>
  42:	00 00       	nop
  44:	9d c4       	rjmp	.+2362   	; 0x980 <__vector_17>
  46:	00 00       	nop
  48:	d2 c4       	rjmp	.+2468   	; 0x9ee <__vector_18>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2f c3       	rjmp	.+1630   	; 0x71c <__vector_47>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	c4 c4       	rjmp	.+2440   	; 0xabe <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	12 e2       	ldi	r17, 0x22	; 34
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 e0       	ldi	r30, 0x04	; 4
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 30       	cpi	r26, 0x0A	; 10
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	22 e2       	ldi	r18, 0x22	; 34
 22a:	aa e0       	ldi	r26, 0x0A	; 10
 22c:	b2 e2       	ldi	r27, 0x22	; 34
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	aa 38       	cpi	r26, 0x8A	; 138
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	78 d4       	rcall	.+2288   	; 0xb2a <main>
 23a:	e2 c4       	rjmp	.+2500   	; 0xc00 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <increment_button_debounce_count>:
		increment_button_debounce_count(OPT1_BTN_INDEX);
	}
}

void increment_button_debounce_count(const unsigned char button_index) {
	Button* button = &(buttons[button_index]);
 23e:	e8 2f       	mov	r30, r24
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	e6 5f       	subi	r30, 0xF6	; 246
 248:	fd 4d       	sbci	r31, 0xDD	; 221
	unsigned char button_index_bm = CONVERT_INDEX_TO_BITMAP(button_index);
	
	if(button->debounce_count < BUTTON_MAX) {
 24a:	40 81       	ld	r20, Z
 24c:	45 30       	cpi	r20, 0x05	; 5
 24e:	88 f4       	brcc	.+34     	; 0x272 <increment_button_debounce_count+0x34>
	}
}

void increment_button_debounce_count(const unsigned char button_index) {
	Button* button = &(buttons[button_index]);
	unsigned char button_index_bm = CONVERT_INDEX_TO_BITMAP(button_index);
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <increment_button_debounce_count+0x1e>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <increment_button_debounce_count+0x1a>
	
	if(button->debounce_count < BUTTON_MAX) {
		button->debounce_count++;
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	40 83       	st	Z, r20
		if(!(button_on_flags & button_index_bm) && button->debounce_count >= BUTTON_ON_THRESHOLD) {
 264:	26 2d       	mov	r18, r6
 266:	26 23       	and	r18, r22
 268:	21 f4       	brne	.+8      	; 0x272 <increment_button_debounce_count+0x34>
 26a:	43 30       	cpi	r20, 0x03	; 3
 26c:	10 f0       	brcs	.+4      	; 0x272 <increment_button_debounce_count+0x34>
			button_changed_flags |= button_index_bm;
 26e:	76 2a       	or	r7, r22
			button_on_flags |= button_index_bm;
 270:	66 2a       	or	r6, r22
 272:	08 95       	ret

00000274 <decrement_button_debounce_count>:
		}
	}
}

void decrement_button_debounce_count(const unsigned char button_index) {
	Button* button = &(buttons[button_index]);
 274:	e8 2f       	mov	r30, r24
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	e6 5f       	subi	r30, 0xF6	; 246
 27e:	fd 4d       	sbci	r31, 0xDD	; 221
	unsigned char button_index_bm = CONVERT_INDEX_TO_BITMAP(button_index);
	
	if(button->debounce_count > 0) {
 280:	40 81       	ld	r20, Z
 282:	44 23       	and	r20, r20
 284:	99 f0       	breq	.+38     	; 0x2ac <decrement_button_debounce_count+0x38>
	}
}

void decrement_button_debounce_count(const unsigned char button_index) {
	Button* button = &(buttons[button_index]);
	unsigned char button_index_bm = CONVERT_INDEX_TO_BITMAP(button_index);
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <decrement_button_debounce_count+0x1e>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <decrement_button_debounce_count+0x1a>
 296:	cb 01       	movw	r24, r22
	
	if(button->debounce_count > 0) {
		button->debounce_count--;
 298:	41 50       	subi	r20, 0x01	; 1
 29a:	40 83       	st	Z, r20
		if((button_on_flags & button_index_bm) && button->debounce_count <= BUTTON_OFF_THRESHOLD) {
 29c:	26 2d       	mov	r18, r6
 29e:	26 23       	and	r18, r22
 2a0:	29 f0       	breq	.+10     	; 0x2ac <decrement_button_debounce_count+0x38>
 2a2:	43 30       	cpi	r20, 0x03	; 3
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <decrement_button_debounce_count+0x38>
			button_changed_flags |= button_index_bm;
 2a6:	76 2a       	or	r7, r22
			button_on_flags &= ~(button_index_bm);
 2a8:	80 95       	com	r24
 2aa:	68 22       	and	r6, r24
 2ac:	08 95       	ret

000002ae <setup_buttons>:

register unsigned char button_on_flags asm("r6");
register unsigned char button_changed_flags asm("r7");

void setup_buttons() {
	PORTR_DIRCLR = OPT1_BTN;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 e2 07 	sts	0x07E2, r24
	
	PORTR_PIN0CTRL &= ~(PORT_OPC_gm);
 2b4:	e0 ef       	ldi	r30, 0xF0	; 240
 2b6:	f7 e0       	ldi	r31, 0x07	; 7
 2b8:	80 81       	ld	r24, Z
 2ba:	87 7c       	andi	r24, 0xC7	; 199
 2bc:	80 83       	st	Z, r24
	PORTR_PIN0CTRL |= PORT_OPC_PULLUP_gc;
 2be:	80 81       	ld	r24, Z
 2c0:	88 61       	ori	r24, 0x18	; 24
 2c2:	80 83       	st	Z, r24
	
	PORTR_PIN1CTRL &= ~(PORT_OPC_gm);
 2c4:	e1 ef       	ldi	r30, 0xF1	; 241
 2c6:	f7 e0       	ldi	r31, 0x07	; 7
 2c8:	80 81       	ld	r24, Z
 2ca:	87 7c       	andi	r24, 0xC7	; 199
 2cc:	80 83       	st	Z, r24
	PORTR_PIN1CTRL |= PORT_OPC_PULLUP_gc;
 2ce:	80 81       	ld	r24, Z
 2d0:	88 61       	ori	r24, 0x18	; 24
 2d2:	80 83       	st	Z, r24
 2d4:	08 95       	ret

000002d6 <sample_buttons>:
}

void sample_buttons() {
	if(PORTD_IN & UP_BUTTON) {
 2d6:	80 91 68 06 	lds	r24, 0x0668
 2da:	80 ff       	sbrs	r24, 0
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <sample_buttons+0xe>
		increment_button_debounce_count(UP_BUTTON_INDEX);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	ae df       	rcall	.-164    	; 0x23e <increment_button_debounce_count>
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <sample_buttons+0x12>
	} else {
		decrement_button_debounce_count(UP_BUTTON_INDEX);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	c6 df       	rcall	.-116    	; 0x274 <decrement_button_debounce_count>
	}
		
	if(PORTD_IN & DOWN_BUTTON) {
 2e8:	80 91 68 06 	lds	r24, 0x0668
 2ec:	81 ff       	sbrs	r24, 1
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <sample_buttons+0x20>
		increment_button_debounce_count(DOWN_BUTTON_INDEX);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	a5 df       	rcall	.-182    	; 0x23e <increment_button_debounce_count>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <sample_buttons+0x24>
	} else {
		decrement_button_debounce_count(DOWN_BUTTON_INDEX);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	bd df       	rcall	.-134    	; 0x274 <decrement_button_debounce_count>
	}
		
	if(PORTD_IN & RIGHT_BUTTON) {
 2fa:	80 91 68 06 	lds	r24, 0x0668
 2fe:	82 ff       	sbrs	r24, 2
 300:	03 c0       	rjmp	.+6      	; 0x308 <sample_buttons+0x32>
		increment_button_debounce_count(RIGHT_BUTTON_INDEX);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	9c df       	rcall	.-200    	; 0x23e <increment_button_debounce_count>
 306:	02 c0       	rjmp	.+4      	; 0x30c <sample_buttons+0x36>
	} else {
		decrement_button_debounce_count(RIGHT_BUTTON_INDEX);
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	b4 df       	rcall	.-152    	; 0x274 <decrement_button_debounce_count>
	}
		
	if(PORTD_IN & LEFT_BUTTON) {
 30c:	80 91 68 06 	lds	r24, 0x0668
 310:	83 ff       	sbrs	r24, 3
 312:	03 c0       	rjmp	.+6      	; 0x31a <sample_buttons+0x44>
		increment_button_debounce_count(LEFT_BUTTON_INDEX);
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	93 df       	rcall	.-218    	; 0x23e <increment_button_debounce_count>
 318:	02 c0       	rjmp	.+4      	; 0x31e <sample_buttons+0x48>
	} else {
		decrement_button_debounce_count(LEFT_BUTTON_INDEX);
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	ab df       	rcall	.-170    	; 0x274 <decrement_button_debounce_count>
	}
		
	if(PORTR_IN & OPT1_BTN) {
 31e:	80 91 e8 07 	lds	r24, 0x07E8
 322:	80 ff       	sbrs	r24, 0
 324:	03 c0       	rjmp	.+6      	; 0x32c <sample_buttons+0x56>
		decrement_button_debounce_count(OPT1_BTN_INDEX);
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	a5 cf       	rjmp	.-182    	; 0x274 <decrement_button_debounce_count>
 32a:	08 95       	ret
	} else {
		increment_button_debounce_count(OPT1_BTN_INDEX);
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	87 cf       	rjmp	.-242    	; 0x23e <increment_button_debounce_count>
 330:	08 95       	ret

00000332 <has_button_changed>:
		}
	}
}

const unsigned char has_button_changed(const unsigned char button_index) {
	return button_changed_flags & CONVERT_INDEX_TO_BITMAP(button_index);
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	a9 01       	movw	r20, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <has_button_changed+0xc>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	8a 95       	dec	r24
 340:	e2 f7       	brpl	.-8      	; 0x33a <has_button_changed+0x8>
 342:	ca 01       	movw	r24, r20
}
 344:	87 21       	and	r24, r7
 346:	08 95       	ret

00000348 <is_button_pressed>:

const unsigned char is_button_pressed(const unsigned char button_index) {
	button_changed_flags &= ~(CONVERT_INDEX_TO_BITMAP(button_index));
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	a9 01       	movw	r20, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <is_button_pressed+0xc>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <is_button_pressed+0x8>
 358:	ca 01       	movw	r24, r20
 35a:	94 2f       	mov	r25, r20
 35c:	90 95       	com	r25
 35e:	79 22       	and	r7, r25
	return (button_on_flags & CONVERT_INDEX_TO_BITMAP(button_index));
 360:	86 21       	and	r24, r6
 362:	08 95       	ret

00000364 <clear_frame_buffer>:
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

void clear_frame_buffer() {
 364:	e0 e0       	ldi	r30, 0x00	; 0
 366:	f0 e2       	ldi	r31, 0x20	; 32
	short i;
	for(i = 0; i < WIDTH*HEIGHT; i++) {
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
		if((i % WIDTH == 0) | (i % WIDTH == WIDTH - 1) | i < WIDTH | i >= (WIDTH * (HEIGHT - 1))) {
			frame_buffer[i] = 0xff;
 36c:	7f ef       	ldi	r23, 0xFF	; 255
};

void clear_frame_buffer() {
	short i;
	for(i = 0; i < WIDTH*HEIGHT; i++) {
		if((i % WIDTH == 0) | (i % WIDTH == WIDTH - 1) | i < WIDTH | i >= (WIDTH * (HEIGHT - 1))) {
 36e:	9c 01       	movw	r18, r24
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	ac 01       	movw	r20, r24
 374:	40 51       	subi	r20, 0x10	; 16
 376:	51 09       	sbc	r21, r1
 378:	40 3e       	cpi	r20, 0xE0	; 224
 37a:	51 05       	cpc	r21, r1
 37c:	08 f4       	brcc	.+2      	; 0x380 <clear_frame_buffer+0x1c>
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	2f 70       	andi	r18, 0x0F	; 15
 382:	33 27       	eor	r19, r19
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	23 2b       	or	r18, r19
 388:	09 f0       	breq	.+2      	; 0x38c <clear_frame_buffer+0x28>
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	46 2b       	or	r20, r22
 38e:	91 f4       	brne	.+36     	; 0x3b4 <clear_frame_buffer+0x50>
 390:	9c 01       	movw	r18, r24
 392:	2f 70       	andi	r18, 0x0F	; 15
 394:	30 78       	andi	r19, 0x80	; 128
 396:	33 23       	and	r19, r19
 398:	34 f4       	brge	.+12     	; 0x3a6 <clear_frame_buffer+0x42>
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	31 09       	sbc	r19, r1
 39e:	20 6f       	ori	r18, 0xF0	; 240
 3a0:	3f 6f       	ori	r19, 0xFF	; 255
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	2f 30       	cpi	r18, 0x0F	; 15
 3aa:	31 05       	cpc	r19, r1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <clear_frame_buffer+0x4c>
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	44 23       	and	r20, r20
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <clear_frame_buffer+0x54>
			frame_buffer[i] = 0xff;
 3b4:	70 83       	st	Z, r23
			continue;
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <clear_frame_buffer+0x56>
		}
		frame_buffer[i] = 0x00;
 3b8:	10 82       	st	Z, r1
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

void clear_frame_buffer() {
	short i;
	for(i = 0; i < WIDTH*HEIGHT; i++) {
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	31 96       	adiw	r30, 0x01	; 1
 3be:	81 15       	cp	r24, r1
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	92 07       	cpc	r25, r18
 3c4:	a1 f6       	brne	.-88     	; 0x36e <clear_frame_buffer+0xa>
			frame_buffer[i] = 0xff;
			continue;
		}
		frame_buffer[i] = 0x00;
	}
 3c6:	08 95       	ret

000003c8 <init_snake_body>:

void init_snake_body() {
	unsigned char i;
	char x = SNAKE_BODY_INIT_X;
	char y = SNAKE_BODY_INIT_Y;
	snake_body_size = SNAKE_BODY_INIT_SIZE;
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	80 93 17 22 	sts	0x2217, r24
	update_snake_flag = 0x00;
 3ce:	10 92 14 22 	sts	0x2214, r1
	
	snake_head_pos_x = x;
 3d2:	0f 2e       	mov	r0, r31
 3d4:	f7 e0       	ldi	r31, 0x07	; 7
 3d6:	df 2e       	mov	r13, r31
 3d8:	f0 2d       	mov	r31, r0
	snake_head_pos_y = y;
 3da:	0f 2e       	mov	r0, r31
 3dc:	f7 e0       	ldi	r31, 0x07	; 7
 3de:	ef 2e       	mov	r14, r31
 3e0:	f0 2d       	mov	r31, r0
	
	snake[0].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(x, y);
 3e2:	e7 e7       	ldi	r30, 0x77	; 119
 3e4:	f0 e2       	ldi	r31, 0x20	; 32
 3e6:	e0 93 21 22 	sts	0x2221, r30
 3ea:	f0 93 22 22 	sts	0x2222, r31
	*(snake[0].frame_buffer_ptr) = SNAKE_HEAD_COLOUR;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
	y++;
	
	for(i = 1; i < snake_body_size; i++) {
		snake[i].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(x, y); 
 3f2:	e7 e8       	ldi	r30, 0x87	; 135
 3f4:	f0 e2       	ldi	r31, 0x20	; 32
 3f6:	e0 93 25 22 	sts	0x2225, r30
 3fa:	f0 93 26 22 	sts	0x2226, r31
		*(snake[i].frame_buffer_ptr) = SNAKE_BODY_COLOUR;
 3fe:	93 e2       	ldi	r25, 0x23	; 35
 400:	90 83       	st	Z, r25
		snake[i].position.x = x;
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	80 93 27 22 	sts	0x2227, r24
		snake[i].position.y = y;
 408:	28 e0       	ldi	r18, 0x08	; 8
 40a:	20 93 28 22 	sts	0x2228, r18
	snake[0].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(x, y);
	*(snake[0].frame_buffer_ptr) = SNAKE_HEAD_COLOUR;
	y++;
	
	for(i = 1; i < snake_body_size; i++) {
		snake[i].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(x, y); 
 40e:	e7 e9       	ldi	r30, 0x97	; 151
 410:	f0 e2       	ldi	r31, 0x20	; 32
 412:	e0 93 29 22 	sts	0x2229, r30
 416:	f0 93 2a 22 	sts	0x222A, r31
		*(snake[i].frame_buffer_ptr) = SNAKE_BODY_COLOUR;
 41a:	90 83       	st	Z, r25
		snake[i].position.x = x;
 41c:	80 93 2b 22 	sts	0x222B, r24
		snake[i].position.y = y;
 420:	89 e0       	ldi	r24, 0x09	; 9
 422:	80 93 2c 22 	sts	0x222C, r24
 426:	08 95       	ret

00000428 <init_game_state>:
		y++;
	}
}

void init_game_state() {
	fruit_pos_curr_index = 0;
 428:	10 92 85 22 	sts	0x2285, r1
	curr_direction = UP;
 42c:	10 e0       	ldi	r17, 0x00	; 0
	game_paused = 0xff;
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	80 93 16 22 	sts	0x2216, r24
	updates = 0;
 434:	10 92 15 22 	sts	0x2215, r1
 438:	08 95       	ret

0000043a <initialize_game>:
static unsigned char game_paused;
static unsigned char updates;
static unsigned char update_snake_flag;

void initialize_game() {
	init_snake_body();
 43a:	c6 df       	rcall	.-116    	; 0x3c8 <init_snake_body>
	init_game_state();
 43c:	f5 df       	rcall	.-22     	; 0x428 <init_game_state>
	fruit_pos_x = fruit_spawn_positions[fruit_pos_curr_index].x;
 43e:	e0 91 85 22 	lds	r30, 0x2285
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	e0 50       	subi	r30, 0x00	; 0
 44a:	ff 4d       	sbci	r31, 0xDF	; 223
 44c:	f0 80       	ld	r15, Z
	fruit_pos_y = fruit_spawn_positions[fruit_pos_curr_index].y;
 44e:	e1 81       	ldd	r30, Z+1	; 0x01
 450:	0e 2f       	mov	r16, r30
	*(GET_FRAME_BUFFER_PTR(fruit_pos_x, fruit_pos_y)) = FRUIT_COLOUR;
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	e8 9f       	mul	r30, r24
 456:	f0 01       	movw	r30, r0
 458:	11 24       	eor	r1, r1
 45a:	ef 0d       	add	r30, r15
 45c:	f1 1d       	adc	r31, r1
 45e:	e0 50       	subi	r30, 0x00	; 0
 460:	f0 4e       	sbci	r31, 0xE0	; 224
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 83       	st	Z, r24
 466:	08 95       	ret

00000468 <change_direction>:
	game_paused = 0xff;
	updates = 0;
}

void change_direction(const Direction new_direction) {
	switch(new_direction) {
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	61 f0       	breq	.+24     	; 0x484 <change_direction+0x1c>
 46c:	28 f0       	brcs	.+10     	; 0x478 <change_direction+0x10>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	19 f0       	breq	.+6      	; 0x478 <change_direction+0x10>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	61 f4       	brne	.+24     	; 0x48e <change_direction+0x26>
 476:	06 c0       	rjmp	.+12     	; 0x484 <change_direction+0x1c>
		case UP:
		case DOWN:
			// If the y-coordinates for the first and second snake cell are the same it is traveling horizontally
			if(snake_head_pos_y == snake[1].position.y) {
 478:	90 91 28 22 	lds	r25, 0x2228
 47c:	9e 11       	cpse	r25, r14
 47e:	07 c0       	rjmp	.+14     	; 0x48e <change_direction+0x26>
				curr_direction = new_direction;
 480:	18 2f       	mov	r17, r24
 482:	08 95       	ret
			}
			break;
		case LEFT:
		case RIGHT:
			// If the x-coordinate for the first and second snake cell are the same, it is traveling vertically
			if(snake_head_pos_x == snake[1].position.x) {
 484:	90 91 27 22 	lds	r25, 0x2227
 488:	9d 11       	cpse	r25, r13
 48a:	01 c0       	rjmp	.+2      	; 0x48e <change_direction+0x26>
				curr_direction = new_direction;
 48c:	18 2f       	mov	r17, r24
 48e:	08 95       	ret

00000490 <update_snake_position>:
			update_snake_position(snake_head_pos_x + 1, snake_head_pos_y);
			break;
	}
}

void update_snake_position(const char new_x, const char new_y) {
 490:	6f 92       	push	r6
 492:	7f 92       	push	r7
 494:	9f 92       	push	r9
 496:	af 92       	push	r10
 498:	bf 92       	push	r11
 49a:	cf 92       	push	r12
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
	register char next_x asm("r9");
	register char next_y asm("r10");
	register char prev_x asm("r11");
	register char prev_y asm("r12");
	
	prev_x = snake_head_pos_x;
 4a0:	2d 2d       	mov	r18, r13
	prev_y = snake_head_pos_y;
 4a2:	ce 2c       	mov	r12, r14
	
	snake[0].position.x = new_x;
 4a4:	80 93 23 22 	sts	0x2223, r24
	snake[0].position.y = new_y;
 4a8:	60 93 24 22 	sts	0x2224, r22
	snake_head_pos_x = new_x;
 4ac:	d8 2e       	mov	r13, r24
	snake_head_pos_y = new_y;
 4ae:	e6 2e       	mov	r14, r22
	snake[0].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(new_x, new_y); 
 4b0:	e8 2f       	mov	r30, r24
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	40 e1       	ldi	r20, 0x10	; 16
 4b6:	64 9f       	mul	r22, r20
 4b8:	e0 0d       	add	r30, r0
 4ba:	f1 1d       	adc	r31, r1
 4bc:	11 24       	eor	r1, r1
 4be:	e0 50       	subi	r30, 0x00	; 0
 4c0:	f0 4e       	sbci	r31, 0xE0	; 224
 4c2:	e0 93 21 22 	sts	0x2221, r30
 4c6:	f0 93 22 22 	sts	0x2222, r31
	*(snake[0].frame_buffer_ptr) = SNAKE_HEAD_COLOUR;
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	90 83       	st	Z, r25
	
	next_x = prev_x;
 4ce:	92 2e       	mov	r9, r18
	next_y = prev_y;
 4d0:	ac 2c       	mov	r10, r12
	
	for(i = 1; i < snake_body_size; i++) {
 4d2:	90 91 17 22 	lds	r25, 0x2217
 4d6:	92 30       	cpi	r25, 0x02	; 2
 4d8:	60 f1       	brcs	.+88     	; 0x532 <update_snake_position+0xa2>
		prev_x = snake[i].position.x;
		prev_y = snake[i].position.y;
		
		if(prev_x == snake_head_pos_x && prev_y == snake_head_pos_y) {
 4da:	b6 2e       	mov	r11, r22
 4dc:	a7 e2       	ldi	r26, 0x27	; 39
 4de:	b2 e2       	ldi	r27, 0x22	; 34
 4e0:	e8 e2       	ldi	r30, 0x28	; 40
 4e2:	f2 e2       	ldi	r31, 0x22	; 34
 4e4:	71 e0       	ldi	r23, 0x01	; 1
		}
			
		snake[i].position.x = next_x;
		snake[i].position.y = next_y;
		snake[i].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(next_x, next_y);
		*(snake[i].frame_buffer_ptr) = SNAKE_BODY_COLOUR;
 4e6:	63 e2       	ldi	r22, 0x23	; 35
 4e8:	ad 01       	movw	r20, r26
	
	next_x = prev_x;
	next_y = prev_y;
	
	for(i = 1; i < snake_body_size; i++) {
		prev_x = snake[i].position.x;
 4ea:	9c 90       	ld	r9, X
 4ec:	3f 01       	movw	r6, r30
		prev_y = snake[i].position.y;
 4ee:	a0 80       	ld	r10, Z
		
		if(prev_x == snake_head_pos_x && prev_y == snake_head_pos_y) {
 4f0:	98 12       	cpse	r9, r24
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <update_snake_position+0x6e>
 4f4:	ab 10       	cpse	r10, r11
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <update_snake_position+0x6e>
	}
	update_snake_flag = 0x00;
}

void reset_game() {
	clear_frame_buffer();
 4f8:	35 df       	rcall	.-406    	; 0x364 <clear_frame_buffer>
	initialize_game();
 4fa:	9f df       	rcall	.-194    	; 0x43a <initialize_game>
 4fc:	39 c0       	rjmp	.+114    	; 0x570 <update_snake_position+0xe0>
		if(prev_x == snake_head_pos_x && prev_y == snake_head_pos_y) {
			reset_game();
			return;
		}
			
		snake[i].position.x = next_x;
 4fe:	ea 01       	movw	r28, r20
 500:	28 83       	st	Y, r18
		snake[i].position.y = next_y;
 502:	e3 01       	movw	r28, r6
 504:	c8 82       	st	Y, r12
		snake[i].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(next_x, next_y);
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	d0 e1       	ldi	r29, 0x10	; 16
 50a:	cd 9e       	mul	r12, r29
 50c:	20 0d       	add	r18, r0
 50e:	31 1d       	adc	r19, r1
 510:	11 24       	eor	r1, r1
 512:	20 50       	subi	r18, 0x00	; 0
 514:	30 4e       	sbci	r19, 0xE0	; 224
 516:	e3 01       	movw	r28, r6
 518:	23 97       	sbiw	r28, 0x03	; 3
 51a:	28 83       	st	Y, r18
 51c:	39 83       	std	Y+1, r19	; 0x01
		*(snake[i].frame_buffer_ptr) = SNAKE_BODY_COLOUR;
 51e:	e9 01       	movw	r28, r18
 520:	68 83       	st	Y, r22
 522:	7f 5f       	subi	r23, 0xFF	; 255
 524:	14 96       	adiw	r26, 0x04	; 4
 526:	34 96       	adiw	r30, 0x04	; 4
	*(snake[0].frame_buffer_ptr) = SNAKE_HEAD_COLOUR;
	
	next_x = prev_x;
	next_y = prev_y;
	
	for(i = 1; i < snake_body_size; i++) {
 528:	79 17       	cp	r23, r25
 52a:	18 f4       	brcc	.+6      	; 0x532 <update_snake_position+0xa2>
		snake[i].position.x = next_x;
		snake[i].position.y = next_y;
		snake[i].frame_buffer_ptr = GET_FRAME_BUFFER_PTR(next_x, next_y);
		*(snake[i].frame_buffer_ptr) = SNAKE_BODY_COLOUR;
			
		next_x = prev_x;
 52c:	29 2d       	mov	r18, r9
		next_y = prev_y;
 52e:	ca 2c       	mov	r12, r10
 530:	db cf       	rjmp	.-74     	; 0x4e8 <update_snake_position+0x58>
	}
	
	if(!update_snake_flag) {
 532:	80 91 14 22 	lds	r24, 0x2214
 536:	81 11       	cpse	r24, r1
 538:	0a c0       	rjmp	.+20     	; 0x54e <update_snake_position+0xbe>
		*(GET_FRAME_BUFFER_PTR(next_x, next_y)) = 0x00;
 53a:	d0 e1       	ldi	r29, 0x10	; 16
 53c:	ad 9e       	mul	r10, r29
 53e:	f0 01       	movw	r30, r0
 540:	11 24       	eor	r1, r1
 542:	e9 0d       	add	r30, r9
 544:	f1 1d       	adc	r31, r1
 546:	e0 50       	subi	r30, 0x00	; 0
 548:	f0 4e       	sbci	r31, 0xE0	; 224
 54a:	10 82       	st	Z, r1
		return;
 54c:	11 c0       	rjmp	.+34     	; 0x570 <update_snake_position+0xe0>
	
	add_new_snake_body_cell(next_x, next_y);
}

void add_new_snake_body_cell(const char new_cell_x, const char new_cell_y) {
	if(snake_body_size < MAX_SNAKE_SIZE) {
 54e:	99 31       	cpi	r25, 0x19	; 25
 550:	68 f4       	brcc	.+26     	; 0x56c <update_snake_position+0xdc>
		snake[snake_body_size].position.x = new_cell_x;
 552:	e9 2f       	mov	r30, r25
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	ef 5d       	subi	r30, 0xDF	; 223
 560:	fd 4d       	sbci	r31, 0xDD	; 221
 562:	92 82       	std	Z+2, r9	; 0x02
		snake[snake_body_size].position.y = new_cell_y;
 564:	a3 82       	std	Z+3, r10	; 0x03
		snake_body_size++;
 566:	9f 5f       	subi	r25, 0xFF	; 255
 568:	90 93 17 22 	sts	0x2217, r25
	}
	update_snake_flag = 0x00;
 56c:	10 92 14 22 	sts	0x2214, r1
		*(GET_FRAME_BUFFER_PTR(next_x, next_y)) = 0x00;
		return;
	}
	
	add_new_snake_body_cell(next_x, next_y);
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	cf 90       	pop	r12
 576:	bf 90       	pop	r11
 578:	af 90       	pop	r10
 57a:	9f 90       	pop	r9
 57c:	7f 90       	pop	r7
 57e:	6f 90       	pop	r6
 580:	08 95       	ret

00000582 <update_snake>:
		}
	}
}

void update_snake() {
	switch(curr_direction) {
 582:	11 30       	cpi	r17, 0x01	; 1
 584:	59 f0       	breq	.+22     	; 0x59c <update_snake+0x1a>
 586:	28 f0       	brcs	.+10     	; 0x592 <update_snake+0x10>
 588:	12 30       	cpi	r17, 0x02	; 2
 58a:	69 f0       	breq	.+26     	; 0x5a6 <update_snake+0x24>
 58c:	13 30       	cpi	r17, 0x03	; 3
 58e:	81 f0       	breq	.+32     	; 0x5b0 <update_snake+0x2e>
 590:	08 95       	ret
		case UP:
			update_snake_position(snake_head_pos_x, snake_head_pos_y - 1);
 592:	6f ef       	ldi	r22, 0xFF	; 255
 594:	6e 0d       	add	r22, r14
 596:	8d 2d       	mov	r24, r13
 598:	7b cf       	rjmp	.-266    	; 0x490 <update_snake_position>
			break;
 59a:	08 95       	ret
		case LEFT:
			update_snake_position(snake_head_pos_x - 1, snake_head_pos_y);
 59c:	6e 2d       	mov	r22, r14
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	8d 0d       	add	r24, r13
 5a2:	76 cf       	rjmp	.-276    	; 0x490 <update_snake_position>
			break;
 5a4:	08 95       	ret
		case DOWN:
			update_snake_position(snake_head_pos_x, snake_head_pos_y + 1);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	6e 0d       	add	r22, r14
 5aa:	8d 2d       	mov	r24, r13
 5ac:	71 cf       	rjmp	.-286    	; 0x490 <update_snake_position>
			break;
 5ae:	08 95       	ret
		case RIGHT:
			update_snake_position(snake_head_pos_x + 1, snake_head_pos_y);
 5b0:	6e 2d       	mov	r22, r14
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	8d 0d       	add	r24, r13
 5b6:	6c cf       	rjmp	.-296    	; 0x490 <update_snake_position>
 5b8:	08 95       	ret

000005ba <update_game_state>:
			break;
	}
}

void update_game_state() {
	if(!game_paused) {
 5ba:	80 91 16 22 	lds	r24, 0x2216
 5be:	81 11       	cpse	r24, r1
 5c0:	3f c0       	rjmp	.+126    	; 0x640 <update_game_state+0x86>
		updates++;
 5c2:	80 91 15 22 	lds	r24, 0x2215
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	80 93 15 22 	sts	0x2215, r24
		
		// Check if snake out of bounds
		if(snake_head_pos_y < 1 || snake_head_pos_y > HEIGHT - 1 || snake_head_pos_x < 1 || snake_head_pos_x > WIDTH - 2) {
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	9e 0d       	add	r25, r14
 5d0:	9f 30       	cpi	r25, 0x0F	; 15
 5d2:	20 f4       	brcc	.+8      	; 0x5dc <update_game_state+0x22>
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	2d 0d       	add	r18, r13
 5d8:	2e 30       	cpi	r18, 0x0E	; 14
 5da:	18 f0       	brcs	.+6      	; 0x5e2 <update_game_state+0x28>
	}
	update_snake_flag = 0x00;
}

void reset_game() {
	clear_frame_buffer();
 5dc:	c3 de       	rcall	.-634    	; 0x364 <clear_frame_buffer>
	initialize_game();
 5de:	2d cf       	rjmp	.-422    	; 0x43a <initialize_game>
 5e0:	08 95       	ret
}

void check_if_snake_ate_fruit() {
	if(snake_head_pos_x == fruit_pos_x && snake_head_pos_y == fruit_pos_y) {
 5e2:	df 10       	cpse	r13, r15
 5e4:	26 c0       	rjmp	.+76     	; 0x632 <update_game_state+0x78>
 5e6:	e0 12       	cpse	r14, r16
 5e8:	24 c0       	rjmp	.+72     	; 0x632 <update_game_state+0x78>
		play_song(&up_song);
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	92 e2       	ldi	r25, 0x22	; 34
 5ee:	4e d0       	rcall	.+156    	; 0x68c <play_song>
		fruit_pos_curr_index++;
 5f0:	80 91 85 22 	lds	r24, 0x2285
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
		if(fruit_pos_curr_index >= NUM_POSITIONS) {
 5f6:	84 31       	cpi	r24, 0x14	; 20
 5f8:	18 f4       	brcc	.+6      	; 0x600 <update_game_state+0x46>
}

void check_if_snake_ate_fruit() {
	if(snake_head_pos_x == fruit_pos_x && snake_head_pos_y == fruit_pos_y) {
		play_song(&up_song);
		fruit_pos_curr_index++;
 5fa:	80 93 85 22 	sts	0x2285, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <update_game_state+0x4a>
		if(fruit_pos_curr_index >= NUM_POSITIONS) {
			fruit_pos_curr_index = 0;
 600:	10 92 85 22 	sts	0x2285, r1
		}
		update_snake_flag = 0xff;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	80 93 14 22 	sts	0x2214, r24
		fruit_pos_x = fruit_spawn_positions[fruit_pos_curr_index].x;
 60a:	e0 91 85 22 	lds	r30, 0x2285
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	e0 50       	subi	r30, 0x00	; 0
 616:	ff 4d       	sbci	r31, 0xDF	; 223
 618:	f0 80       	ld	r15, Z
		fruit_pos_y = fruit_spawn_positions[fruit_pos_curr_index].y;
 61a:	e1 81       	ldd	r30, Z+1	; 0x01
 61c:	0e 2f       	mov	r16, r30
		*(GET_FRAME_BUFFER_PTR(fruit_pos_x, fruit_pos_y)) = FRUIT_COLOUR;
 61e:	80 e1       	ldi	r24, 0x10	; 16
 620:	e8 9f       	mul	r30, r24
 622:	f0 01       	movw	r30, r0
 624:	11 24       	eor	r1, r1
 626:	ef 0d       	add	r30, r15
 628:	f1 1d       	adc	r31, r1
 62a:	e0 50       	subi	r30, 0x00	; 0
 62c:	f0 4e       	sbci	r31, 0xE0	; 224
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 83       	st	Z, r24
			reset_game();
			return;
		}
		
		check_if_snake_ate_fruit();
		if(updates >= UPDATES_PER_SNAKE_UPDATE) {
 632:	80 91 15 22 	lds	r24, 0x2215
 636:	8a 30       	cpi	r24, 0x0A	; 10
 638:	18 f0       	brcs	.+6      	; 0x640 <update_game_state+0x86>
			update_snake();
 63a:	a3 df       	rcall	.-186    	; 0x582 <update_snake>
			updates = 0;
 63c:	10 92 15 22 	sts	0x2215, r1
 640:	08 95       	ret

00000642 <toggle_pause_game>:
		*(GET_FRAME_BUFFER_PTR(fruit_pos_x, fruit_pos_y)) = FRUIT_COLOUR;
	}
}

void toggle_pause_game() {
	if(game_paused) {
 642:	80 91 16 22 	lds	r24, 0x2216
 646:	88 23       	and	r24, r24
 648:	19 f0       	breq	.+6      	; 0x650 <toggle_pause_game+0xe>
		game_paused = 0x00;
 64a:	10 92 16 22 	sts	0x2216, r1
 64e:	08 95       	ret
	} else {
		game_paused = 0xff;
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	80 93 16 22 	sts	0x2216, r24
 656:	08 95       	ret

00000658 <setup_sound>:
	setup_sound_timer();
}

void setup_speaker() {
	// Enable onboard speaker
	PORTQ_PIN3CTRL &= ~(PORT_OPC_gm);
 658:	e3 ed       	ldi	r30, 0xD3	; 211
 65a:	f7 e0       	ldi	r31, 0x07	; 7
 65c:	80 81       	ld	r24, Z
 65e:	87 7c       	andi	r24, 0xC7	; 199
 660:	80 83       	st	Z, r24
	PORTQ_PIN3CTRL |= PORT_OPC_PULLUP_gc;
 662:	80 81       	ld	r24, Z
 664:	88 61       	ori	r24, 0x18	; 24
 666:	80 83       	st	Z, r24
	
	DACB_CTRLC |= DAC_REFSEL_AVCC_gc;
 668:	e2 e2       	ldi	r30, 0x22	; 34
 66a:	f3 e0       	ldi	r31, 0x03	; 3
 66c:	80 81       	ld	r24, Z
 66e:	88 60       	ori	r24, 0x08	; 8
 670:	80 83       	st	Z, r24
	DACB_CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm;
 672:	e0 e2       	ldi	r30, 0x20	; 32
 674:	f3 e0       	ldi	r31, 0x03	; 3
 676:	80 81       	ld	r24, Z
 678:	85 60       	ori	r24, 0x05	; 5
 67a:	80 83       	st	Z, r24
}

void setup_sound_timer() {
	TCE0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	80 93 06 0a 	sts	0x0A06, r24
	TCE0_CNT = 0;
 682:	10 92 20 0a 	sts	0x0A20, r1
 686:	10 92 21 0a 	sts	0x0A21, r1
 68a:	08 95       	ret

0000068c <play_song>:
}

void play_song(const Song *song) {
	song_ptr = song;
 68c:	80 93 1d 22 	sts	0x221D, r24
 690:	90 93 1e 22 	sts	0x221E, r25
	
	curr_note = 0;
 694:	10 92 1c 22 	sts	0x221C, r1
	curr_repeat = 0;
 698:	10 92 1a 22 	sts	0x221A, r1
 69c:	10 92 1b 22 	sts	0x221B, r1
	curr_sound = 0;
 6a0:	10 92 19 22 	sts	0x2219, r1
	curr_song_repeat = 0;
 6a4:	10 92 18 22 	sts	0x2218, r1
	
	DACB_CH0DATA = song_ptr->notes[curr_note].sounds[curr_sound].amplitude;
 6a8:	dc 01       	movw	r26, r24
 6aa:	11 96       	adiw	r26, 0x01	; 1
 6ac:	ed 91       	ld	r30, X+
 6ae:	fc 91       	ld	r31, X
 6b0:	12 97       	sbiw	r26, 0x02	; 2
 6b2:	01 80       	ldd	r0, Z+1	; 0x01
 6b4:	f2 81       	ldd	r31, Z+2	; 0x02
 6b6:	e0 2d       	mov	r30, r0
 6b8:	80 81       	ld	r24, Z
 6ba:	91 81       	ldd	r25, Z+1	; 0x01
 6bc:	80 93 38 03 	sts	0x0338, r24
 6c0:	90 93 39 03 	sts	0x0339, r25
	TCE0_PER = song_ptr->notes[curr_note].sounds[curr_sound].period;
 6c4:	a0 91 1d 22 	lds	r26, 0x221D
 6c8:	b0 91 1e 22 	lds	r27, 0x221E
 6cc:	80 91 1c 22 	lds	r24, 0x221C
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fc 01       	movw	r30, r24
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	8e 0f       	add	r24, r30
 6de:	9f 1f       	adc	r25, r31
 6e0:	11 96       	adiw	r26, 0x01	; 1
 6e2:	ed 91       	ld	r30, X+
 6e4:	fc 91       	ld	r31, X
 6e6:	12 97       	sbiw	r26, 0x02	; 2
 6e8:	e8 0f       	add	r30, r24
 6ea:	f9 1f       	adc	r31, r25
 6ec:	80 91 19 22 	lds	r24, 0x2219
 6f0:	01 80       	ldd	r0, Z+1	; 0x01
 6f2:	f2 81       	ldd	r31, Z+2	; 0x02
 6f4:	e0 2d       	mov	r30, r0
 6f6:	b4 e0       	ldi	r27, 0x04	; 4
 6f8:	8b 9f       	mul	r24, r27
 6fa:	e0 0d       	add	r30, r0
 6fc:	f1 1d       	adc	r31, r1
 6fe:	11 24       	eor	r1, r1
 700:	82 81       	ldd	r24, Z+2	; 0x02
 702:	93 81       	ldd	r25, Z+3	; 0x03
 704:	80 93 26 0a 	sts	0x0A26, r24
 708:	90 93 27 0a 	sts	0x0A27, r25
	
	TCE0_CNT = 0;
 70c:	10 92 20 0a 	sts	0x0A20, r1
 710:	10 92 21 0a 	sts	0x0A21, r1
	TCE0_CTRLA = TC_CLKSEL_DIV1_gc;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	80 93 00 0a 	sts	0x0A00, r24
 71a:	08 95       	ret

0000071c <__vector_47>:
}

ISR(TCE0_OVF_vect) {
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	08 b6       	in	r0, 0x38	; 56
 728:	0f 92       	push	r0
 72a:	18 be       	out	0x38, r1	; 56
 72c:	09 b6       	in	r0, 0x39	; 57
 72e:	0f 92       	push	r0
 730:	19 be       	out	0x39, r1	; 57
 732:	0b b6       	in	r0, 0x3b	; 59
 734:	0f 92       	push	r0
 736:	1b be       	out	0x3b, r1	; 59
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
	if(curr_note == song_ptr->num_sounds) {
 74a:	e0 91 1d 22 	lds	r30, 0x221D
 74e:	f0 91 1e 22 	lds	r31, 0x221E
 752:	40 91 1c 22 	lds	r20, 0x221C
 756:	80 81       	ld	r24, Z
 758:	84 13       	cpse	r24, r20
 75a:	14 c0       	rjmp	.+40     	; 0x784 <__vector_47+0x68>
		if(curr_song_repeat < song_ptr->num_repeats) {
 75c:	80 91 18 22 	lds	r24, 0x2218
 760:	93 81       	ldd	r25, Z+3	; 0x03
 762:	89 17       	cp	r24, r25
 764:	60 f4       	brcc	.+24     	; 0x77e <__vector_47+0x62>
			curr_sound = 0;
 766:	10 92 19 22 	sts	0x2219, r1
			curr_repeat = 0;
 76a:	10 92 1a 22 	sts	0x221A, r1
 76e:	10 92 1b 22 	sts	0x221B, r1
			curr_note = 0;
 772:	10 92 1c 22 	sts	0x221C, r1
			curr_song_repeat++;
 776:	8f 5f       	subi	r24, 0xFF	; 255
 778:	80 93 18 22 	sts	0x2218, r24
 77c:	37 c0       	rjmp	.+110    	; 0x7ec <__vector_47+0xd0>
			} else {
			TCE0_CTRLA = TC_CLKSEL_OFF_gc;
 77e:	10 92 00 0a 	sts	0x0A00, r1
 782:	34 c0       	rjmp	.+104    	; 0x7ec <__vector_47+0xd0>
		}
	} else if(curr_sound < song_ptr->notes[curr_note].num_sounds) {
 784:	84 2f       	mov	r24, r20
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	9c 01       	movw	r18, r24
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	82 0f       	add	r24, r18
 794:	93 1f       	adc	r25, r19
 796:	01 80       	ldd	r0, Z+1	; 0x01
 798:	f2 81       	ldd	r31, Z+2	; 0x02
 79a:	e0 2d       	mov	r30, r0
 79c:	e8 0f       	add	r30, r24
 79e:	f9 1f       	adc	r31, r25
 7a0:	80 91 19 22 	lds	r24, 0x2219
 7a4:	90 81       	ld	r25, Z
 7a6:	89 17       	cp	r24, r25
 7a8:	20 f4       	brcc	.+8      	; 0x7b2 <__vector_47+0x96>
		curr_sound++;
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 93 19 22 	sts	0x2219, r24
 7b0:	1d c0       	rjmp	.+58     	; 0x7ec <__vector_47+0xd0>
	} else if(curr_repeat < song_ptr->notes[curr_note].num_repeats) {
 7b2:	23 81       	ldd	r18, Z+3	; 0x03
 7b4:	34 81       	ldd	r19, Z+4	; 0x04
 7b6:	80 91 1a 22 	lds	r24, 0x221A
 7ba:	90 91 1b 22 	lds	r25, 0x221B
 7be:	82 17       	cp	r24, r18
 7c0:	93 07       	cpc	r25, r19
 7c2:	40 f4       	brcc	.+16     	; 0x7d4 <__vector_47+0xb8>
		curr_repeat++;
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	80 93 1a 22 	sts	0x221A, r24
 7ca:	90 93 1b 22 	sts	0x221B, r25
		curr_sound = 0;
 7ce:	10 92 19 22 	sts	0x2219, r1
 7d2:	0c c0       	rjmp	.+24     	; 0x7ec <__vector_47+0xd0>
	} else if(curr_repeat == song_ptr->notes[curr_note].num_repeats) {
 7d4:	28 17       	cp	r18, r24
 7d6:	39 07       	cpc	r19, r25
 7d8:	49 f4       	brne	.+18     	; 0x7ec <__vector_47+0xd0>
		curr_note++;
 7da:	4f 5f       	subi	r20, 0xFF	; 255
 7dc:	40 93 1c 22 	sts	0x221C, r20
		curr_repeat = 0;
 7e0:	10 92 1a 22 	sts	0x221A, r1
 7e4:	10 92 1b 22 	sts	0x221B, r1
		curr_sound = 0;
 7e8:	10 92 19 22 	sts	0x2219, r1
	}
	DACB_CH0DATA = song_ptr->notes[curr_note].sounds[curr_sound].amplitude;
 7ec:	a0 91 1d 22 	lds	r26, 0x221D
 7f0:	b0 91 1e 22 	lds	r27, 0x221E
 7f4:	80 91 1c 22 	lds	r24, 0x221C
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	fc 01       	movw	r30, r24
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	8e 0f       	add	r24, r30
 806:	9f 1f       	adc	r25, r31
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	ed 91       	ld	r30, X+
 80c:	fc 91       	ld	r31, X
 80e:	12 97       	sbiw	r26, 0x02	; 2
 810:	e8 0f       	add	r30, r24
 812:	f9 1f       	adc	r31, r25
 814:	80 91 19 22 	lds	r24, 0x2219
 818:	01 80       	ldd	r0, Z+1	; 0x01
 81a:	f2 81       	ldd	r31, Z+2	; 0x02
 81c:	e0 2d       	mov	r30, r0
 81e:	94 e0       	ldi	r25, 0x04	; 4
 820:	89 9f       	mul	r24, r25
 822:	e0 0d       	add	r30, r0
 824:	f1 1d       	adc	r31, r1
 826:	11 24       	eor	r1, r1
 828:	80 81       	ld	r24, Z
 82a:	91 81       	ldd	r25, Z+1	; 0x01
 82c:	80 93 38 03 	sts	0x0338, r24
 830:	90 93 39 03 	sts	0x0339, r25
	TCE0_PER = song_ptr->notes[curr_note].sounds[curr_sound].period;
 834:	a0 91 1d 22 	lds	r26, 0x221D
 838:	b0 91 1e 22 	lds	r27, 0x221E
 83c:	80 91 1c 22 	lds	r24, 0x221C
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	fc 01       	movw	r30, r24
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	8e 0f       	add	r24, r30
 84e:	9f 1f       	adc	r25, r31
 850:	11 96       	adiw	r26, 0x01	; 1
 852:	ed 91       	ld	r30, X+
 854:	fc 91       	ld	r31, X
 856:	12 97       	sbiw	r26, 0x02	; 2
 858:	e8 0f       	add	r30, r24
 85a:	f9 1f       	adc	r31, r25
 85c:	80 91 19 22 	lds	r24, 0x2219
 860:	01 80       	ldd	r0, Z+1	; 0x01
 862:	f2 81       	ldd	r31, Z+2	; 0x02
 864:	e0 2d       	mov	r30, r0
 866:	94 e0       	ldi	r25, 0x04	; 4
 868:	89 9f       	mul	r24, r25
 86a:	e0 0d       	add	r30, r0
 86c:	f1 1d       	adc	r31, r1
 86e:	11 24       	eor	r1, r1
 870:	82 81       	ldd	r24, Z+2	; 0x02
 872:	93 81       	ldd	r25, Z+3	; 0x03
 874:	80 93 26 0a 	sts	0x0A26, r24
 878:	90 93 27 0a 	sts	0x0A27, r25
	TCE0_CNT = 0;
 87c:	10 92 20 0a 	sts	0x0A20, r1
 880:	10 92 21 0a 	sts	0x0A21, r1
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0b be       	out	0x3b, r0	; 59
 89a:	0f 90       	pop	r0
 89c:	09 be       	out	0x39, r0	; 57
 89e:	0f 90       	pop	r0
 8a0:	08 be       	out	0x38, r0	; 56
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <setup_vga>:
	screen_colour_mask = DEFAULT_SCREEN_COLOUR_MASK;
	frame_buffer_ptr = frame_buffer;
}

void setup_vga_port() {
	PORTCFG_VPCTRLA = 0x20; // Assigns PORTC to Virtual Port 1 and PORTA to Virtual Port 0
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	80 93 b2 00 	sts	0x00B2, r24
	VGA_PORT.DIR = VSYNC_PIN | HSYNC_PIN;
 8b2:	80 ec       	ldi	r24, 0xC0	; 192
 8b4:	80 bb       	out	0x10, r24	; 16
	COLOR_PORT.DIR = RED_PIN | GREEN_PIN | BLUE_PIN;
 8b6:	83 e2       	ldi	r24, 0x23	; 35
 8b8:	84 bb       	out	0x14, r24	; 20
	
	VGA_PORT_OUT |= VSYNC_PIN | HSYNC_PIN;
 8ba:	81 b3       	in	r24, 0x11	; 17
 8bc:	80 6c       	ori	r24, 0xC0	; 192
 8be:	81 bb       	out	0x11, r24	; 17
	COLOR_PORT_OUT &= ~(RED_PIN | GREEN_PIN | BLUE_PIN);
 8c0:	85 b3       	in	r24, 0x15	; 21
 8c2:	8c 7d       	andi	r24, 0xDC	; 220
 8c4:	85 bb       	out	0x15, r24	; 21
	setup_scanline_timer();
	setup_pixel_clock();
}

void setup_scanline_timer() {
	TCC0_PER = CYCLES_PER_HPERIOD;
 8c6:	89 e1       	ldi	r24, 0x19	; 25
 8c8:	93 e0       	ldi	r25, 0x03	; 3
 8ca:	80 93 26 08 	sts	0x0826, r24
 8ce:	90 93 27 08 	sts	0x0827, r25
	TCC0_CCA = CC_HSYNC_PULSE;
 8d2:	82 e5       	ldi	r24, 0x52	; 82
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	80 93 28 08 	sts	0x0828, r24
 8da:	90 93 29 08 	sts	0x0829, r25
	TCC0_CCB = CC_HBACKPORCH;
 8de:	88 e7       	ldi	r24, 0x78	; 120
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	80 93 2a 08 	sts	0x082A, r24
 8e6:	90 93 2b 08 	sts	0x082B, r25
	TCC0_CCC = CC_HFRONTPORCH;
 8ea:	89 e0       	ldi	r24, 0x09	; 9
 8ec:	93 e0       	ldi	r25, 0x03	; 3
 8ee:	80 93 2c 08 	sts	0x082C, r24
 8f2:	90 93 2d 08 	sts	0x082D, r25
	
	TCC0_INTCTRLA = TC_OVFINTLVL_HI_gc;
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	80 93 06 08 	sts	0x0806, r24
	TCC0_INTCTRLB = TC_CCAINTLVL_MED_gc | TC_CCBINTLVL_MED_gc | TC_CCCINTLVL_MED_gc;
 8fc:	8a e2       	ldi	r24, 0x2A	; 42
 8fe:	80 93 07 08 	sts	0x0807, r24
}

void setup_pixel_clock() {
	TCD0_PER = CYCLES_PER_PIXEL;
 902:	83 e2       	ldi	r24, 0x23	; 35
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	80 93 26 09 	sts	0x0926, r24
 90a:	90 93 27 09 	sts	0x0927, r25
	TCD0_INTCTRLA = TC_OVFINTLVL_MED_gc;
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	80 93 06 09 	sts	0x0906, r24
register unsigned char num_pixels_displayed asm("r4");

void setup_vga() {
	setup_vga_port();
	setup_vga_timers();
	vsync_backporch = 0x00;
 914:	10 92 89 22 	sts	0x2289, r1
	curr_scanline = 0;
 918:	10 92 1f 22 	sts	0x221F, r1
 91c:	10 92 20 22 	sts	0x2220, r1
	screen_colour_mask = DEFAULT_SCREEN_COLOUR_MASK;
 920:	87 e0       	ldi	r24, 0x07	; 7
 922:	80 93 88 22 	sts	0x2288, r24
	frame_buffer_ptr = frame_buffer;
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	90 e2       	ldi	r25, 0x20	; 32
 92a:	80 93 86 22 	sts	0x2286, r24
 92e:	90 93 87 22 	sts	0x2287, r25
 932:	08 95       	ret

00000934 <start_vga>:
	TCD0_PER = CYCLES_PER_PIXEL;
	TCD0_INTCTRLA = TC_OVFINTLVL_MED_gc;
}

void start_vga() {
	curr_scanline = 0;
 934:	10 92 1f 22 	sts	0x221F, r1
 938:	10 92 20 22 	sts	0x2220, r1
	TCC0_CTRLA = TC_CLKSEL_DIV2_gc;
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	80 93 00 08 	sts	0x0800, r24
	TCD0_CTRLA = TC_CLKSEL_DIV1_gc;
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	80 93 00 09 	sts	0x0900, r24
 948:	08 95       	ret

0000094a <__vector_16>:
}

// Handles the end of an hsync pulse
ISR(TCC0_CCA_vect, ISR_NOBLOCK) {
 94a:	78 94       	sei
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	08 b6       	in	r0, 0x38	; 56
 958:	0f 92       	push	r0
 95a:	18 be       	out	0x38, r1	; 56
 95c:	8f 93       	push	r24
	VGA_PORT_OUT |= HSYNC_PIN;
 95e:	8e 9a       	sbi	0x11, 6	; 17
	num_pixels_displayed = 0;
 960:	41 2c       	mov	r4, r1
	TCD0_CNT = 0;
 962:	10 92 20 09 	sts	0x0920, r1
 966:	10 92 21 09 	sts	0x0921, r1
	TCD0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	80 93 06 09 	sts	0x0906, r24
}
 970:	8f 91       	pop	r24
 972:	0f 90       	pop	r0
 974:	08 be       	out	0x38, r0	; 56
 976:	0f 90       	pop	r0
 978:	0f be       	out	0x3f, r0	; 63
 97a:	0f 90       	pop	r0
 97c:	1f 90       	pop	r1
 97e:	18 95       	reti

00000980 <__vector_17>:

// Handles the end of the hsync back porch
ISR(TCC0_CCB_vect, ISR_NOBLOCK) {
 980:	78 94       	sei
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	08 b6       	in	r0, 0x38	; 56
 98e:	0f 92       	push	r0
 990:	18 be       	out	0x38, r1	; 56
 992:	2f 93       	push	r18
 994:	8f 93       	push	r24
 996:	9f 93       	push	r25
	visible_area = 0xff;
 998:	33 24       	eor	r3, r3
 99a:	3a 94       	dec	r3
	curr_scanline++;
 99c:	80 91 1f 22 	lds	r24, 0x221F
 9a0:	90 91 20 22 	lds	r25, 0x2220
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	80 93 1f 22 	sts	0x221F, r24
 9aa:	90 93 20 22 	sts	0x2220, r25
	if(curr_scanline == SCAN_LINES_RESET) {
 9ae:	80 91 1f 22 	lds	r24, 0x221F
 9b2:	90 91 20 22 	lds	r25, 0x2220
 9b6:	8d 30       	cpi	r24, 0x0D	; 13
 9b8:	92 40       	sbci	r25, 0x02	; 2
 9ba:	79 f4       	brne	.+30     	; 0x9da <__vector_17+0x5a>
		TCE0_INTCTRLA = 0x00;
 9bc:	10 92 06 0a 	sts	0x0A06, r1
		frame_buffer_ptr = frame_buffer;
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e2       	ldi	r25, 0x20	; 32
 9c4:	80 93 86 22 	sts	0x2286, r24
 9c8:	90 93 87 22 	sts	0x2287, r25
		curr_scanline = 0;
 9cc:	10 92 1f 22 	sts	0x221F, r1
 9d0:	10 92 20 22 	sts	0x2220, r1
		TCD0_CTRLA = TC_CLKSEL_DIV1_gc;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	80 93 00 09 	sts	0x0900, r24
	}
}
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	08 be       	out	0x38, r0	; 56
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__vector_18>:

// Handles the end of the visible area
ISR(TCC0_CCC_vect, ISR_NOBLOCK) {
 9ee:	78 94       	sei
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	08 b6       	in	r0, 0x38	; 56
 9fc:	0f 92       	push	r0
 9fe:	18 be       	out	0x38, r1	; 56
 a00:	2f 93       	push	r18
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
	visible_area = 0x00;
 a06:	31 2c       	mov	r3, r1
	TCD0_INTCTRLA = 0x00;
 a08:	10 92 06 09 	sts	0x0906, r1
	COLOR_PORT_OUT = 0x00;
 a0c:	15 ba       	out	0x15, r1	; 21
	if(curr_scanline == SCAN_LINES_VSYNC_OFF) {
 a0e:	80 91 1f 22 	lds	r24, 0x221F
 a12:	90 91 20 22 	lds	r25, 0x2220
 a16:	8b 3e       	cpi	r24, 0xEB	; 235
 a18:	91 40       	sbci	r25, 0x01	; 1
 a1a:	39 f4       	brne	.+14     	; 0xa2a <__vector_18+0x3c>
		VGA_PORT_OUT &= ~(VSYNC_PIN);
 a1c:	8f 98       	cbi	0x11, 7	; 17
		TCE0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	80 93 06 0a 	sts	0x0A06, r24
		vsync_backporch = 0xff;
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	80 93 89 22 	sts	0x2289, r24
	}
}
 a2a:	9f 91       	pop	r25
 a2c:	8f 91       	pop	r24
 a2e:	2f 91       	pop	r18
 a30:	0f 90       	pop	r0
 a32:	08 be       	out	0x38, r0	; 56
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <__vector_14>:

ISR(TCC0_OVF_vect, ISR_NOBLOCK) {
 a3e:	78 94       	sei
 a40:	1f 92       	push	r1
 a42:	0f 92       	push	r0
 a44:	0f b6       	in	r0, 0x3f	; 63
 a46:	0f 92       	push	r0
 a48:	11 24       	eor	r1, r1
 a4a:	08 b6       	in	r0, 0x38	; 56
 a4c:	0f 92       	push	r0
 a4e:	18 be       	out	0x38, r1	; 56
 a50:	2f 93       	push	r18
 a52:	8f 93       	push	r24
 a54:	9f 93       	push	r25
	TCC0_CNT = 0;
 a56:	10 92 20 08 	sts	0x0820, r1
 a5a:	10 92 21 08 	sts	0x0821, r1
	VGA_PORT_OUT = ~(HSYNC_PIN);
 a5e:	8f eb       	ldi	r24, 0xBF	; 191
 a60:	81 bb       	out	0x11, r24	; 17
	if((curr_scanline & 0x1f) != 24) {
 a62:	80 91 1f 22 	lds	r24, 0x221F
 a66:	90 91 20 22 	lds	r25, 0x2220
 a6a:	8f 71       	andi	r24, 0x1F	; 31
 a6c:	99 27       	eor	r25, r25
 a6e:	48 97       	sbiw	r24, 0x18	; 24
 a70:	51 f0       	breq	.+20     	; 0xa86 <__vector_14+0x48>
		frame_buffer_ptr -= num_pixels_displayed;
 a72:	80 91 86 22 	lds	r24, 0x2286
 a76:	90 91 87 22 	lds	r25, 0x2287
 a7a:	84 19       	sub	r24, r4
 a7c:	91 09       	sbc	r25, r1
 a7e:	80 93 86 22 	sts	0x2286, r24
 a82:	90 93 87 22 	sts	0x2287, r25
	}
	if(curr_scanline == SCAN_LINES) {
 a86:	80 91 1f 22 	lds	r24, 0x221F
 a8a:	90 91 20 22 	lds	r25, 0x2220
 a8e:	80 3e       	cpi	r24, 0xE0	; 224
 a90:	91 40       	sbci	r25, 0x01	; 1
 a92:	19 f4       	brne	.+6      	; 0xa9a <__vector_14+0x5c>
		TCD0_CTRLA = TC_CLKSEL_OFF_gc;
 a94:	10 92 00 09 	sts	0x0900, r1
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <__vector_14+0x6c>
	} else if(curr_scanline == SCAN_LINES_VSYNC) {
 a9a:	80 91 1f 22 	lds	r24, 0x221F
 a9e:	90 91 20 22 	lds	r25, 0x2220
 aa2:	89 3e       	cpi	r24, 0xE9	; 233
 aa4:	91 40       	sbci	r25, 0x01	; 1
 aa6:	09 f4       	brne	.+2      	; 0xaaa <__vector_14+0x6c>
		VGA_PORT_OUT |= VSYNC_PIN;
 aa8:	8f 9a       	sbi	0x11, 7	; 17
	}
}
 aaa:	9f 91       	pop	r25
 aac:	8f 91       	pop	r24
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	08 be       	out	0x38, r0	; 56
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <__vector_77>:

ISR(TCD0_OVF_vect) {
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	08 b6       	in	r0, 0x38	; 56
 aca:	0f 92       	push	r0
 acc:	18 be       	out	0x38, r1	; 56
 ace:	0b b6       	in	r0, 0x3b	; 59
 ad0:	0f 92       	push	r0
 ad2:	1b be       	out	0x3b, r1	; 59
 ad4:	2f 93       	push	r18
 ad6:	8f 93       	push	r24
 ad8:	9f 93       	push	r25
 ada:	ef 93       	push	r30
 adc:	ff 93       	push	r31
	TCD0_CNT = 0;
 ade:	10 92 20 09 	sts	0x0920, r1
 ae2:	10 92 21 09 	sts	0x0921, r1
	COLOR_PORT_OUT = *frame_buffer_ptr & visible_area;
 ae6:	e0 91 86 22 	lds	r30, 0x2286
 aea:	f0 91 87 22 	lds	r31, 0x2287
 aee:	80 81       	ld	r24, Z
 af0:	83 21       	and	r24, r3
 af2:	85 bb       	out	0x15, r24	; 21
	frame_buffer_ptr += (1 & visible_area);
 af4:	23 2d       	mov	r18, r3
 af6:	21 70       	andi	r18, 0x01	; 1
 af8:	80 91 86 22 	lds	r24, 0x2286
 afc:	90 91 87 22 	lds	r25, 0x2287
 b00:	82 0f       	add	r24, r18
 b02:	91 1d       	adc	r25, r1
 b04:	80 93 86 22 	sts	0x2286, r24
 b08:	90 93 87 22 	sts	0x2287, r25
	num_pixels_displayed += (1 & visible_area);
 b0c:	42 0e       	add	r4, r18
 b0e:	ff 91       	pop	r31
 b10:	ef 91       	pop	r30
 b12:	9f 91       	pop	r25
 b14:	8f 91       	pop	r24
 b16:	2f 91       	pop	r18
 b18:	0f 90       	pop	r0
 b1a:	0b be       	out	0x3b, r0	; 59
 b1c:	0f 90       	pop	r0
 b1e:	08 be       	out	0x38, r0	; 56
 b20:	0f 90       	pop	r0
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	0f 90       	pop	r0
 b26:	1f 90       	pop	r1
 b28:	18 95       	reti

00000b2a <main>:
static void setup_main_timer();
static void update_state();

int main(void)
{
	set_sleep_mode(SLEEP_MODE_IDLE);
 b2a:	e8 e4       	ldi	r30, 0x48	; 72
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	81 7f       	andi	r24, 0xF1	; 241
 b32:	80 83       	st	Z, r24
	PORTF.DIRSET |= 0x01;
 b34:	e0 ea       	ldi	r30, 0xA0	; 160
 b36:	f6 e0       	ldi	r31, 0x06	; 6
 b38:	81 81       	ldd	r24, Z+1	; 0x01
 b3a:	81 60       	ori	r24, 0x01	; 1
 b3c:	81 83       	std	Z+1, r24	; 0x01
void initialize_games() {
	initialize_game();
}

void setup_main_timer() {
	OSC.PLLCTRL = 0;
 b3e:	e0 e5       	ldi	r30, 0x50	; 80
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	15 82       	std	Z+5, r1	; 0x05
	OSC.PLLCTRL |= 25;
 b44:	85 81       	ldd	r24, Z+5	; 0x05
 b46:	89 61       	ori	r24, 0x19	; 25
 b48:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;
 b4a:	80 81       	ld	r24, Z
 b4c:	80 61       	ori	r24, 0x10	; 16
 b4e:	80 83       	st	Z, r24
	
	while(!(OSC.STATUS & OSC_PLLRDY_bm));
 b50:	81 81       	ldd	r24, Z+1	; 0x01
 b52:	84 ff       	sbrs	r24, 4
 b54:	fd cf       	rjmp	.-6      	; 0xb50 <main+0x26>
	
	CCP = CCP_IOREG_gc;
 b56:	88 ed       	ldi	r24, 0xD8	; 216
 b58:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;
 b5a:	84 e0       	ldi	r24, 0x04	; 4
 b5c:	80 93 40 00 	sts	0x0040, r24
    }
}

void initialize_console() {
	setup_main_timer();
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 b60:	87 e0       	ldi	r24, 0x07	; 7
 b62:	e0 ea       	ldi	r30, 0xA0	; 160
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	82 83       	std	Z+2, r24	; 0x02
	cli();
 b68:	f8 94       	cli
	setup_sound();
 b6a:	76 dd       	rcall	.-1300   	; 0x658 <setup_sound>
	setup_buttons();
 b6c:	a0 db       	rcall	.-2240   	; 0x2ae <setup_buttons>
	setup_sound();
 b6e:	74 dd       	rcall	.-1304   	; 0x658 <setup_sound>
	setup_vga();
 b70:	9d de       	rcall	.-710    	; 0x8ac <setup_vga>
	sei();
 b72:	78 94       	sei
}

void initialize_games() {
	initialize_game();
 b74:	62 dc       	rcall	.-1852   	; 0x43a <initialize_game>
{
	set_sleep_mode(SLEEP_MODE_IDLE);
	PORTF.DIRSET |= 0x01;
	initialize_console();
	initialize_games();
	start_vga();
 b76:	de de       	rcall	.-580    	; 0x934 <start_vga>
	
    while(1)
    {
		sleep_mode();
 b78:	c8 e4       	ldi	r28, 0x48	; 72
 b7a:	d0 e0       	ldi	r29, 0x00	; 0
 b7c:	88 81       	ld	r24, Y
 b7e:	81 60       	ori	r24, 0x01	; 1
 b80:	88 83       	st	Y, r24
 b82:	88 95       	sleep
 b84:	88 81       	ld	r24, Y
 b86:	8e 7f       	andi	r24, 0xFE	; 254
 b88:	88 83       	st	Y, r24
		if(vsync_backporch) {
 b8a:	80 91 89 22 	lds	r24, 0x2289
 b8e:	88 23       	and	r24, r24
 b90:	a9 f3       	breq	.-22     	; 0xb7c <main+0x52>
			vsync_backporch = 0x00;
 b92:	10 92 89 22 	sts	0x2289, r1
	CCP = CCP_IOREG_gc;
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;
}

void update_state() {
	sample_buttons();
 b96:	9f db       	rcall	.-2242   	; 0x2d6 <sample_buttons>
	update_game_state();
 b98:	10 dd       	rcall	.-1504   	; 0x5ba <update_game_state>
	
	if(has_button_changed(OPT1_BTN_INDEX) && is_button_pressed(OPT1_BTN_INDEX)) {
 b9a:	84 e0       	ldi	r24, 0x04	; 4
 b9c:	ca db       	rcall	.-2156   	; 0x332 <has_button_changed>
 b9e:	88 23       	and	r24, r24
 ba0:	21 f0       	breq	.+8      	; 0xbaa <main+0x80>
 ba2:	84 e0       	ldi	r24, 0x04	; 4
 ba4:	d1 db       	rcall	.-2142   	; 0x348 <is_button_pressed>
 ba6:	81 11       	cpse	r24, r1
		toggle_pause_game();
 ba8:	4c dd       	rcall	.-1384   	; 0x642 <toggle_pause_game>
	}
	
	if(has_button_changed(DOWN_BUTTON_INDEX) && is_button_pressed(DOWN_BUTTON_INDEX)) {
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	c2 db       	rcall	.-2172   	; 0x332 <has_button_changed>
 bae:	88 23       	and	r24, r24
 bb0:	31 f0       	breq	.+12     	; 0xbbe <main+0x94>
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	c9 db       	rcall	.-2158   	; 0x348 <is_button_pressed>
 bb6:	88 23       	and	r24, r24
 bb8:	11 f0       	breq	.+4      	; 0xbbe <main+0x94>
		change_direction(DOWN);
 bba:	82 e0       	ldi	r24, 0x02	; 2
 bbc:	55 dc       	rcall	.-1878   	; 0x468 <change_direction>
	}
	
	if(has_button_changed(UP_BUTTON_INDEX) && is_button_pressed(UP_BUTTON_INDEX)) {
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	b8 db       	rcall	.-2192   	; 0x332 <has_button_changed>
 bc2:	88 23       	and	r24, r24
 bc4:	31 f0       	breq	.+12     	; 0xbd2 <main+0xa8>
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	bf db       	rcall	.-2178   	; 0x348 <is_button_pressed>
 bca:	88 23       	and	r24, r24
 bcc:	11 f0       	breq	.+4      	; 0xbd2 <main+0xa8>
		change_direction(UP);
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	4b dc       	rcall	.-1898   	; 0x468 <change_direction>
	}
	
	if(has_button_changed(LEFT_BUTTON_INDEX) && is_button_pressed(LEFT_BUTTON_INDEX)) {
 bd2:	83 e0       	ldi	r24, 0x03	; 3
 bd4:	ae db       	rcall	.-2212   	; 0x332 <has_button_changed>
 bd6:	88 23       	and	r24, r24
 bd8:	31 f0       	breq	.+12     	; 0xbe6 <main+0xbc>
 bda:	83 e0       	ldi	r24, 0x03	; 3
 bdc:	b5 db       	rcall	.-2198   	; 0x348 <is_button_pressed>
 bde:	88 23       	and	r24, r24
 be0:	11 f0       	breq	.+4      	; 0xbe6 <main+0xbc>
		change_direction(LEFT);
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	41 dc       	rcall	.-1918   	; 0x468 <change_direction>
	}
	
	if(has_button_changed(RIGHT_BUTTON_INDEX) && is_button_pressed(RIGHT_BUTTON_INDEX)) {
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	a4 db       	rcall	.-2232   	; 0x332 <has_button_changed>
 bea:	88 23       	and	r24, r24
 bec:	09 f4       	brne	.+2      	; 0xbf0 <main+0xc6>
 bee:	c6 cf       	rjmp	.-116    	; 0xb7c <main+0x52>
 bf0:	82 e0       	ldi	r24, 0x02	; 2
 bf2:	aa db       	rcall	.-2220   	; 0x348 <is_button_pressed>
 bf4:	88 23       	and	r24, r24
 bf6:	09 f4       	brne	.+2      	; 0xbfa <main+0xd0>
 bf8:	c1 cf       	rjmp	.-126    	; 0xb7c <main+0x52>
		change_direction(RIGHT);
 bfa:	83 e0       	ldi	r24, 0x03	; 3
 bfc:	35 dc       	rcall	.-1942   	; 0x468 <change_direction>
 bfe:	be cf       	rjmp	.-132    	; 0xb7c <main+0x52>

00000c00 <_exit>:
 c00:	f8 94       	cli

00000c02 <__stop_program>:
 c02:	ff cf       	rjmp	.-2      	; 0xc02 <__stop_program>
